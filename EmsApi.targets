<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- From http://blogs.clariusconsulting.net/kzu/how-to-perform-regular-expression-based-replacements-on-files-with-msbuild/ -->
  <UsingTask TaskName="RegexTransform" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v12.0.dll">
      <ParameterGroup>
          <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" />
      </ParameterGroup>
      <Task>
          <Using Namespace="System.IO" />
          <Using Namespace="System.Text.RegularExpressions" />
          <Using Namespace="Microsoft.Build.Framework" />
          <Code Type="Fragment" Language="cs">
              <![CDATA[
        foreach(var item in Items)
        {
          string fileName = item.GetMetadata("FullPath");
          string find = item.GetMetadata("Find");
          string replaceWith = item.GetMetadata("ReplaceWith");
          string optionsValue = item.GetMetadata("Options") ?? "";
  
          var options = string.IsNullOrWhiteSpace(optionsValue) ?
              RegexOptions.None : (RegexOptions)Enum.Parse(typeof(RegexOptions), optionsValue.Replace('|', ','));
  
          if(!File.Exists(fileName))
          {
            Log.LogError("Could not find file: {0}", fileName);
            return false;
          }
          string content = File.ReadAllText(fileName);
          File.WriteAllText(
            fileName,
            Regex.Replace(
              content,
              find,
              replaceWith,
              options
            )
          );
        }
      ]]>
          </Code>
      </Task>
  </UsingTask>

  <PropertyGroup>

    <!-- The canonical build version to use -->
    <EmsApiVersion>0.1.41</EmsApiVersion>

    <!-- Define some directories to use -->
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildThisFileDirectory)</SolutionDir>

    <!-- Note: Nuget really doesn't seem to like trailing slashes -->
    <SolutionBin Condition=" '$(SolutionBin)' == '' ">$(SolutionDir)bin</SolutionBin>
    <PackagesDir Condition=" '$(PackagesDir)' == '' ">$(SolutionDir)packages</PackagesDir>
    <ProjectBin Condition=" '$(ProjectBin)' == '' ">$(ProjectDir)bin</ProjectBin>

    <!-- True if we should automatically restore nuget packages -->
    <RestorePackages Condition="'$(RestorePackages)' == ''">true</RestorePackages>

    <!-- True if we should build a nuget package for this project -->
    <BuildPackage Condition=" '$(BuildPackage)' == '' ">false</BuildPackage>

    <!-- The location of the nuspec file, if it exists -->
    <NuspecFile>$(ProjectDir)$(ProjectName).nuspec</NuspecFile>

    <!-- Where we write out the XML file describing the classes of an assembly -->
    <XmlInfoFile>$(TargetDir)$(TargetName).xml</XmlInfoFile>

    <!-- The command to run when restoring nuget packages -->
    <RestoreCommand>nuget.exe restore "$(ProjectPath)" -PackagesDirectory "$(PackagesDir)" -Verbosity Quiet</RestoreCommand>

    <!-- The command to run when building nuget packages -->
    <PackCommand>nuget.exe pack "$(NuspecFile)" -Properties "Configuration=$(Configuration);Platform=$(Platform);EmsApiVersion=$(EmsApiVersion)" -OutputDirectory "$(SolutionBin)" -NonInteractive</PackCommand>

    <!-- This is a total hack. The NSwag.msbuild nuget package is supposed to define this, but I can't get it to work on appveyor -->
    <NSwagRoot>$(PackagesDir)\nswag.msbuild\9.5.0\build\</NSwagRoot>
    <NSwagExe Condition="'$(NSwagExe)' == '' AND Exists( '$(NSwagRoot)' )">$(NSwagRoot)nswag.exe</NSwagExe>

  </PropertyGroup>

  <!-- Appveyor sets this environment variable -->
  <PropertyGroup Condition="'$(APPVEYOR)' == 'True'" >

    <!-- Add a suffix matching the branch name if it isn't master (temporarily disabled while working on nuget package) -->
    <!-- <Branch Condition="'$(APPVEYOR_REPO_BRANCH)' != 'master'">-Suffix $(APPVEYOR_REPO_BRANCH)</Branch>
    <SafeBranch Condition="'$(Branch)' != ''">$(Branch.Replace('/', '-').Replace('\', '-'))</SafeBranch>
    <PackCommand>$(PackCommand) -Verbosity Quiet $(SafeBranch)</PackCommand> -->

  </PropertyGroup>

  <Target Name="EmsApiPreBuild">
    <WriteLinesToFile
      File="$(SolutionDir)AssemblyInfoShared.cs"
      Overwrite="True"
      Lines="[assembly: System.Reflection.AssemblyVersion(&quot;$(EmsApiVersion)&quot;)] // Generated by build" />

    <Exec Command="$(RestoreCommand)" Condition="'$(RestorePackages)' == 'true'" />
  </Target>

  <Target Name="EmsApiPostBuild">

    <!-- Copy output assemblies to the project's bin directory -->
    <Copy SourceFiles="$(TargetPath)" DestinationFolder="$(ProjectBin)" />

    <!-- Copy output xml files to the project's bin directory -->
    <Copy Condition="Exists('$(XmlInfoFile)')" SourceFiles="$(XmlInfoFile)" DestinationFolder="$(ProjectBin)"  />

    <!-- Copy output assemblies to the solution's bin directory -->
    <Copy SourceFiles="$(TargetPath)" DestinationFolder="$(SolutionBin)" />

    <!-- Generate nuget package if desired -->
    <Exec Command="$(PackCommand)" Condition="'$(BuildPackage)' == 'true'" />
  </Target>

  <!-- Register the target to run before and after the build -->
  <PropertyGroup>
    <BuildDependsOn>
      EmsApiPreBuild;
      $(BuildDependsOn);
      EmsApiPostBuild;
    </BuildDependsOn>
  </PropertyGroup>

</Project>
